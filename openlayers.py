# -*- coding: utf-8 -*-
"""
/***************************************************************************
 openlayers
                                 A QGIS plugin
 Load a webmap directly into QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-05-11
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Tom Chadwin
        email                : tom.chadwin@nnpa.org.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os, random
from datetime import datetime

from PyQt5.QtCore import QDir

from qgis.core import (QgsVectorLayer,
                       QgsPointXY,
                       QgsFeature,
                       QgsGeometry,
                       QgsProject,
                       QgsRectangle,
                       QgsCoordinateReferenceSystem,
                       QgsCoordinateTransform)

from web2qgis.utils import getTempDir, getScript

def detectOpenlayers(mainframe):
    detectResult = mainframe.evaluateJavaScript("ol")
    if detectResult is None:
        result = False
    else:
        result = True
    return result

def getLeafletMap(mainframe, iface):
    tempDir = getTempDir()
    scriptFolder = os.path.join(os.path.dirname(__file__), "js")

    getMapScript = getScript(scriptFolder, "getLeafletMap.js")
    lyrs = None
    lyrs = mainframe.evaluateJavaScript(getMapScript)
    while lyrs is None:
        print("Retrieving layers")
    for count, lyr in enumerate(lyrs):
        if lyr[0] == "wms":
            addWMS(lyr[1], lyr[2], lyr[3], iface)
        elif lyr[0] == "xyz":
            addXYZ(lyr[1], lyr[2], iface)
        elif lyr[0] == "vector":
            addVector(lyr[1], count, tempDir)
        else:
            print("Unsupported layer type")

    setExtents(scriptFolder, mainframe, iface)

def addVector(geoJSON, count, tempDir):
    vectorPath = os.path.join(tempDir, "vector%d.geojson" % count)
    with open(vectorPath, 'w') as vectorFile:
        vectorFile.write(geoJSON)
    vectorLayer = QgsVectorLayer(vectorPath, "vector%d" % count, "ogr")
    vectorLayer.updateExtents()
    QgsProject.instance().addMapLayers([vectorLayer])

def addXYZ(url, options, iface):
    xyzUrl = url.replace("{s}", random.choice("abc")).replace("{r}", "")
    for opt, val in options.items():
        try:
            xyzUrl = xyzUrl.replace("{%s}" % opt, val)
        except:
            pass
    iface.addRasterLayer("type=xyz&url=" + xyzUrl, xyzUrl, "wms")

def addWMS(url, options, crs, iface):
    wmsLayers = options["layers"]
    try:
        format = options["format"]
    except:
        format = "image/png"
    iface.addRasterLayer(
        "format=%s&crs=%s&styles=&layers=%s&url=%s" % (format, crs, wmsLayers,
                                                       url), wmsLayers, "wms")

def setExtents(scriptFolder, mainframe, iface):
    getExtentScript = getScript(scriptFolder, "getLeafletView.js")
    extent = mainframe.evaluateJavaScript(getExtentScript)
    xMin, yMin, xMax, yMax = extent.split(",")
    canvas = iface.mapCanvas()
    xform = QgsCoordinateTransform(QgsCoordinateReferenceSystem(4326),
                                   canvas.mapSettings().destinationCrs(),
                                   QgsProject.instance())
    srcExtent = QgsRectangle(float(xMin), float(yMin),
                             float(xMax), float(yMax))
    dstExtent = xform.transformBoundingBox(srcExtent)
    canvas.setExtent(dstExtent)
    canvas.refresh()
