# -*- coding: utf-8 -*-
"""
/***************************************************************************
 leaflet
                                 A QGIS plugin
 Load a webmap directly into QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-05-11
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Tom Chadwin
        email                : tom.chadwin@nnpa.org.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os, random
from datetime import datetime

from PyQt5.QtCore import QDir

from qgis.core import (QgsVectorLayer,
                       QgsPointXY,
                       QgsFeature,
                       QgsGeometry,
                       QgsProject)

def detectLeaflet(mainframe):
    detectResult = mainframe.evaluateJavaScript("L.version")
    if detectResult is None:
        result = False
    else:
        result = True
    return result

def getLeafletMap(mainframe, iface):
    scriptPath = os.path.join(os.path.dirname(__file__), "js",
                              "getLeafletMap.js")
    with open(scriptPath, 'r') as scriptFile:
        script = scriptFile.read()
    lyrs = None
    lyrs = mainframe.evaluateJavaScript(script)
    while lyrs is None:
        print("Retrieving layers")
    for count, lyr in enumerate(lyrs):
        if lyr[0] == "xyz":
            print("xyz")
            xyzUrl = lyr[1].replace("{s}", random.choice("abc")).replace("{r}",
                                                                         "")
            for opt, val in lyr[2].items():
                # print(opt, val)
                try:
                    xyzUrl = xyzUrl.replace("{" + opt + "}", val)
                except:
                    pass
            iface.addRasterLayer("type=xyz&url=" + xyzUrl, xyzUrl, "wms")
        elif lyr[0] == "vector":
            print("vector")
            tempDir = os.path.join(
                unicode(QDir.tempPath()),
                'web2qgis',
                datetime.now().strftime("%Y_%m_%d-%H_%M_%S_%f"))
            if not QDir(tempDir).exists():
                QDir().mkpath(tempDir)
            vectorPath = os.path.join(tempDir,
                                      "vector" + str(count) + ".geojson")
            with open(vectorPath, 'w') as vectorFile:
                vectorFile.write(lyr[1])
            vectorLayer = QgsVectorLayer(vectorPath,
                                         "vector" + str(count),
                                         "ogr")
             
            # Update extent of the layer
            vectorLayer.updateExtents()
             
            # Add the layer to the Layers panel
            QgsProject.instance().addMapLayers([vectorLayer])
        elif lyr[0] == "marker":
            print("marker")
            markerLayer = QgsVectorLayer('Point?crs=epsg:4326',
                                         'point',
                                         'memory')
 
            # Set the provider to accept the data source
            prov = markerLayer.dataProvider()
            point = QgsPointXY(lyr[1]["lng"], lyr[1]["lat"])
             
            # Add a new feature and assign the geometry
            feat = QgsFeature()
            feat.setGeometry(QgsGeometry.fromPointXY(point))
            prov.addFeatures([feat])
             
            # Update extent of the layer
            markerLayer.updateExtents()
             
            # Add the layer to the Layers panel
            QgsProject.instance().addMapLayers([markerLayer])
        elif lyr[0] == "polyline":
            print("polyline")
            linestringLayer = QgsVectorLayer('LineString?crs=epsg:4326',
                                             'line',
                                             'memory')
 
            # Set the provider to accept the data source
            prov = linestringLayer.dataProvider()

            if isinstance(lyr[1][0], dict):
                print("dict")
                lines = []
                lines.append([lyr[1][0]])
            else:
                print("list")
                lines = lyr[1][0]
            for line in lines:
                points = []
                for point in line:
                    print("^^")
                    print(point)
                    print("$$")
                    points.append("%s %s" % (point["lng"], point["lat"]))
                linestring = ",".join(points)

                # Add a new feature and assign the geometry
                feat = QgsFeature()
                feat.setGeometry(QgsGeometry.fromWkt(
                    "LINESTRING(%s)" % linestring))
                prov.addFeatures([feat])
             
            # Update extent of the layer
            linestringLayer.updateExtents()
             
            # Add the layer to the Layers panel
            QgsProject.instance().addMapLayers([linestringLayer])
        elif lyr[0] == "polygon":
            print("polygon")
            points = []
            for point in lyr[1]:
                points.append("%s %s" % (point["lng"], point["lat"]))
            polygon = ",".join(points)
            polygonLayer = QgsVectorLayer('Polygon?crs=epsg:4326',
                                          'polygon',
                                          'memory')
 
            # Set the provider to accept the data source
            prov = polygonLayer.dataProvider()

            # Add a new feature and assign the geometry
            feat = QgsFeature()
            feat.setGeometry(QgsGeometry.fromWkt("POLYGON((%s))" % polygon))
            prov.addFeatures([feat])
             
            # Update extent of the layer
            polygonLayer.updateExtents()
             
            # Add the layer to the Layers panel
            QgsProject.instance().addMapLayers([polygonLayer])
        else:
            print("Unsupported layer type")
